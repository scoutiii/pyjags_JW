name: Wheels (cibuildwheel) + sdist

on:
  push:
    branches: [ main, master ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-13]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python (host)
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      # Enable aarch64 emulation so cibuildwheel can build manylinux aarch64
      - name: Set up QEMU (Linux only)
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Install build tooling
        run: |
          python -m pip install -U pip build cibuildwheel

      - name: Build wheels with cibuildwheel
        env:
          # Python versions / variants
          CIBW_BUILD: "cp311-* cp312-* cp313-*"
          CIBW_SKIP: "pp* *musllinux*"   # adjust if you want PyPy/musllinux too

          # Target architectures
          CIBW_ARCHS_LINUX: "x86_64 aarch64"
          CIBW_ARCHS_MACOS: "universal2"

          # Install JAGS inside each build env
          CIBW_BEFORE_ALL_LINUX: "bash {project}/ci/install_jags_linux.sh"
          CIBW_BEFORE_ALL_MACOS: "bash {project}/ci/install_jags_macos.sh"

          # Make JAGS discoverable during the build
          # Linux: we install to /opt/jags in the installer script.
          CIBW_ENVIRONMENT_LINUX: >-
            PKG_CONFIG_PATH=/opt/jags/lib/pkgconfig
            CPPFLAGS='-I/opt/jags/include'
            LDFLAGS='-L/opt/jags/lib'

          # macOS: support both Intel (/usr/local) and Apple Silicon (/opt/homebrew) brew prefixes.
          # Also ensure CMake honors universal2.
          CIBW_ENVIRONMENT_MACOS: >-
            PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/opt/homebrew/lib/pkgconfig
            CMAKE_OSX_ARCHITECTURES='arm64;x86_64'

          # If you prefer a stricter manylinux policy, uncomment one of these:
          # CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          # CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28
        run: |
          python -m cibuildwheel --output-dir wheelhouse

      - name: Build sdist
        run: |
          python -m build --sdist
          ls -l dist

      - name: Show wheels
        run: ls -l wheelhouse

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: |
            wheelhouse/*.whl
            dist/*.tar.gz
          if-no-files-found: error
